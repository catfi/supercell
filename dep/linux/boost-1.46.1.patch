diff -rupN boost~/mpl/aux_/integral_wrapper.hpp boost/mpl/aux_/integral_wrapper.hpp
--- boost~/mpl/aux_/integral_wrapper.hpp	2011-05-04 13:20:51.000000000 +0800
+++ boost/mpl/aux_/integral_wrapper.hpp	2011-07-15 14:10:30.252430253 +0800
@@ -56,7 +56,7 @@ struct AUX_WRAPPER_NAME
 // have to #ifdef here: some compilers don't like the 'N + 1' form (MSVC),
 // while some other don't like 'value + 1' (Borland), and some don't like
 // either
-#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)
+#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)  || defined(__CUDACC__)
  private:
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, next_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N + 1)));
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, prior_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N - 1)));
diff -rupN boost~/mpl/size_t_fwd.hpp boost/mpl/size_t_fwd.hpp
--- boost~/mpl/size_t_fwd.hpp	2011-05-04 13:20:40.000000000 +0800
+++ boost/mpl/size_t_fwd.hpp	2011-07-15 14:10:30.252430253 +0800
@@ -20,7 +20,12 @@
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN
 
+#if defined(__CUDACC__)
+typedef std::size_t std_size_t;
+template< std_size_t N > struct size_t;
+#else
 template< std::size_t N > struct size_t;
+#endif
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE
 BOOST_MPL_AUX_ADL_BARRIER_DECL(size_t)
diff -rupN boost~/mpl/size_t.hpp boost/mpl/size_t.hpp
--- boost~/mpl/size_t.hpp	2011-05-04 13:20:40.000000000 +0800
+++ boost/mpl/size_t.hpp	2011-07-15 14:10:30.252430253 +0800
@@ -16,10 +16,22 @@
 
 #include <boost/mpl/size_t_fwd.hpp>
 
+
+#if defined(__CUDACC__)
+
+//typedef std::size_t std_size_t;
+#define AUX_WRAPPER_VALUE_TYPE std_size_t
+#define AUX_WRAPPER_NAME size_t
+#define AUX_WRAPPER_PARAMS(N) std_size_t N
+
+#else
+
 #define AUX_WRAPPER_VALUE_TYPE std::size_t
 #define AUX_WRAPPER_NAME size_t
 #define AUX_WRAPPER_PARAMS(N) std::size_t N
 
+#endif
+
 #include <boost/mpl/aux_/integral_wrapper.hpp>
 
 #endif // BOOST_MPL_SIZE_T_HPP_INCLUDED
diff -rupN boost~/tuple/detail/tuple_basic.hpp boost/tuple/detail/tuple_basic.hpp
--- boost~/tuple/detail/tuple_basic.hpp	2011-05-04 13:20:55.000000000 +0800
+++ boost/tuple/detail/tuple_basic.hpp	2011-07-15 14:05:09.532968396 +0800
@@ -41,6 +41,68 @@
 
 #include "boost/detail/workaround.hpp" // needed for BOOST_WORKAROUND
 
+#ifndef __CUDACC__
+
+#ifndef __decl_host
+#define __decl_host
+#endif
+
+#ifndef __decl_device
+#define __decl_device
+#endif
+
+#ifndef __decl_global
+#define __decl_global
+#endif
+
+#ifndef __decl_shared
+#define __decl_shared
+#endif
+
+#ifndef __decl_noinline
+#define __decl_noinline __attribute__((noinline))
+#endif
+
+#ifndef __decl_forceinline
+#define __decl_forceinline
+#endif
+
+#ifndef __decl_constant
+#define __decl_constant
+#endif
+
+#else
+
+#ifndef __decl_host
+#define __decl_host __host__
+#endif
+
+#ifndef __decl_device
+#define __decl_device __device__
+#endif
+
+#ifndef __decl_global
+#define __decl_global __global__
+#endif
+
+#ifndef __decl_shared
+#define __decl_shared __shared__
+#endif
+
+#ifndef __decl_noinline
+#define __decl_noinline __noinline__
+#endif
+
+#ifndef __decl_forceinline
+#define __decl_forceinline __forceinline__
+#endif
+
+#ifndef __decl_constant
+#define __decl_constant __constant__
+#endif
+
+#endif
+
 namespace boost {
 namespace tuples {
 
@@ -94,7 +156,7 @@ struct drop_front {
         typedef BOOST_DEDUCED_TYPENAME drop_front<N-1>::BOOST_NESTED_TEMPLATE
             apply<Tuple> next;
         typedef BOOST_DEDUCED_TYPENAME next::type::tail_type type;
-        static const type& call(const Tuple& tup) {
+        __decl_host __decl_device static const type& call(const Tuple& tup) {
             return next::call(tup).tail;
         }
     };
@@ -105,7 +167,7 @@ struct drop_front<0> {
     template<class Tuple>
     struct apply {
         typedef Tuple type;
-        static const type& call(const Tuple& tup) {
+        __decl_host __decl_device static const type& call(const Tuple& tup) {
             return tup;
         }
     };
@@ -208,7 +270,7 @@ template<int N, class HT, class TT>
 inline typename access_traits<
                   typename element<N, cons<HT, TT> >::type
                 >::non_const_type
-get(cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
+__decl_host __decl_device get(cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
       apply<cons<HT, TT> > impl;
   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
@@ -222,7 +284,7 @@ template<int N, class HT, class TT>
 inline typename access_traits<
                   typename element<N, cons<HT, TT> >::type
                 >::const_type
-get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
+__decl_host __decl_device get(const cons<HT, TT>& c BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
   typedef BOOST_DEDUCED_TYPENAME detail::drop_front<N>::BOOST_NESTED_TEMPLATE
       apply<cons<HT, TT> > impl;
   typedef BOOST_DEDUCED_TYPENAME impl::type cons_element;
@@ -265,19 +327,19 @@ struct cons {
   stored_head_type head;
   tail_type tail;
 
-  typename access_traits<stored_head_type>::non_const_type
+  __decl_host __decl_device typename access_traits<stored_head_type>::non_const_type
   get_head() { return head; }
 
-  typename access_traits<tail_type>::non_const_type
+  __decl_host __decl_device typename access_traits<tail_type>::non_const_type
   get_tail() { return tail; }
 
-  typename access_traits<stored_head_type>::const_type
+  __decl_host __decl_device typename access_traits<stored_head_type>::const_type
   get_head() const { return head; }
 
-  typename access_traits<tail_type>::const_type
+  __decl_host __decl_device typename access_traits<tail_type>::const_type
   get_tail() const { return tail; }
 
-  cons() : head(), tail() {}
+  __decl_host __decl_device cons() : head(), tail() {}
   //  cons() : head(detail::default_arg<HT>::f()), tail() {}
 
   // the argument for head is not strictly needed, but it prevents
@@ -285,13 +347,13 @@ struct cons {
   // cannot be supported properly in any case (no assignment,
   // copy works only if the tails are exactly the same type, ...)
 
-  cons(typename access_traits<stored_head_type>::parameter_type h,
+  __decl_host __decl_device cons(typename access_traits<stored_head_type>::parameter_type h,
        const tail_type& t)
     : head (h), tail(t) {}
 
   template <class T1, class T2, class T3, class T4, class T5,
             class T6, class T7, class T8, class T9, class T10>
-  cons( T1& t1, T2& t2, T3& t3, T4& t4, T5& t5,
+  __decl_host __decl_device cons( T1& t1, T2& t2, T3& t3, T4& t4, T5& t5,
         T6& t6, T7& t7, T8& t8, T9& t9, T10& t10 )
     : head (t1),
       tail (t2, t3, t4, t5, t6, t7, t8, t9, t10, detail::cnull())
@@ -299,7 +361,7 @@ struct cons {
 
   template <class T2, class T3, class T4, class T5,
             class T6, class T7, class T8, class T9, class T10>
-  cons( const null_type& /*t1*/, T2& t2, T3& t3, T4& t4, T5& t5,
+  __decl_host __decl_device cons( const null_type& /*t1*/, T2& t2, T3& t3, T4& t4, T5& t5,
         T6& t6, T7& t7, T8& t8, T9& t9, T10& t10 )
     : head (),
       tail (t2, t3, t4, t5, t6, t7, t8, t9, t10, detail::cnull())
@@ -307,28 +369,28 @@ struct cons {
 
 
   template <class HT2, class TT2>
-  cons( const cons<HT2, TT2>& u ) : head(u.head), tail(u.tail) {}
+  __decl_host __decl_device cons( const cons<HT2, TT2>& u ) : head(u.head), tail(u.tail) {}
 
   template <class HT2, class TT2>
-  cons& operator=( const cons<HT2, TT2>& u ) {
+  __decl_host __decl_device cons& operator=( const cons<HT2, TT2>& u ) {
     head=u.head; tail=u.tail; return *this;
   }
 
   // must define assignment operator explicitly, implicit version is
   // illformed if HT is a reference (12.8. (12))
-  cons& operator=(const cons& u) {
+  __decl_host __decl_device cons& operator=(const cons& u) {
     head = u.head; tail = u.tail;  return *this;
   }
 
   template <class T1, class T2>
-  cons& operator=( const std::pair<T1, T2>& u ) {
+  __decl_host __decl_device cons& operator=( const std::pair<T1, T2>& u ) {
     BOOST_STATIC_ASSERT(length<cons>::value == 2); // check length = 2
     head = u.first; tail.head = u.second; return *this;
   }
 
   // get member functions (non-const and const)
   template <int N>
-  typename access_traits<
+  __decl_host __decl_device typename access_traits<
              typename element<N, cons<HT, TT> >::type
            >::non_const_type
   get() {
@@ -336,7 +398,7 @@ struct cons {
   }
 
   template <int N>
-  typename access_traits<
+  __decl_host __decl_device typename access_traits<
              typename element<N, cons<HT, TT> >::type
            >::const_type
   get() const {
@@ -356,47 +418,47 @@ struct cons<HT, null_type> {
   stored_head_type head;
 
   typename access_traits<stored_head_type>::non_const_type
-  get_head() { return head; }
+  __decl_host __decl_device get_head() { return head; }
 
-  null_type get_tail() { return null_type(); }
+  __decl_host __decl_device null_type get_tail() { return null_type(); }
 
-  typename access_traits<stored_head_type>::const_type
+  __decl_host __decl_device typename access_traits<stored_head_type>::const_type
   get_head() const { return head; }
 
-  const null_type get_tail() const { return null_type(); }
+  __decl_host __decl_device const null_type get_tail() const { return null_type(); }
 
   //  cons() : head(detail::default_arg<HT>::f()) {}
-  cons() : head() {}
+  __decl_host __decl_device cons() : head() {}
 
-  cons(typename access_traits<stored_head_type>::parameter_type h,
+  __decl_host __decl_device cons(typename access_traits<stored_head_type>::parameter_type h,
        const null_type& = null_type())
     : head (h) {}
 
   template<class T1>
-  cons(T1& t1, const null_type&, const null_type&, const null_type&,
+  __decl_host __decl_device cons(T1& t1, const null_type&, const null_type&, const null_type&,
        const null_type&, const null_type&, const null_type&,
        const null_type&, const null_type&, const null_type&)
   : head (t1) {}
 
-  cons(const null_type&,
+  __decl_host __decl_device cons(const null_type&,
        const null_type&, const null_type&, const null_type&,
        const null_type&, const null_type&, const null_type&,
        const null_type&, const null_type&, const null_type&)
   : head () {}
 
   template <class HT2>
-  cons( const cons<HT2, null_type>& u ) : head(u.head) {}
+  __decl_host __decl_device cons( const cons<HT2, null_type>& u ) : head(u.head) {}
 
   template <class HT2>
-  cons& operator=(const cons<HT2, null_type>& u )
+  __decl_host __decl_device cons& operator=(const cons<HT2, null_type>& u )
   { head = u.head; return *this; }
 
   // must define assignment operator explicitely, implicit version
   // is illformed if HT is a reference
-  cons& operator=(const cons& u) { head = u.head; return *this; }
+  __decl_host __decl_device cons& operator=(const cons& u) { head = u.head; return *this; }
 
   template <int N>
-  typename access_traits<
+  __decl_host __decl_device typename access_traits<
              typename element<N, self_type>::type
             >::non_const_type
   get(BOOST_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) {
@@ -404,7 +466,7 @@ struct cons<HT, null_type> {
   }
 
   template <int N>
-  typename access_traits<
+  __decl_host __decl_device typename access_traits<
              typename element<N, self_type>::type
            >::const_type
   get(BOOST_EXPLICIT_TEMPLATE_NON_TYPE(int, N)) const {
@@ -478,27 +540,27 @@ public:
 
 
 // access_traits<T>::parameter_type takes non-reference types as const T&
-  tuple() {}
+  __decl_host __decl_device tuple() {}
 
-  tuple(typename access_traits<T0>::parameter_type t0)
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0)
     : inherited(t0, detail::cnull(), detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1)
     : inherited(t0, t1, detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2)
     : inherited(t0, t1, t2, detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3)
@@ -506,7 +568,7 @@ public:
                 detail::cnull(), detail::cnull(), detail::cnull(),
                 detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -514,7 +576,7 @@ public:
     : inherited(t0, t1, t2, t3, t4, detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -523,7 +585,7 @@ public:
     : inherited(t0, t1, t2, t3, t4, t5, detail::cnull(), detail::cnull(),
                 detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -533,7 +595,7 @@ public:
     : inherited(t0, t1, t2, t3, t4, t5, t6, detail::cnull(),
                 detail::cnull(), detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -544,7 +606,7 @@ public:
     : inherited(t0, t1, t2, t3, t4, t5, t6, t7, detail::cnull(),
                 detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -555,7 +617,7 @@ public:
         typename access_traits<T8>::parameter_type t8)
     : inherited(t0, t1, t2, t3, t4, t5, t6, t7, t8, detail::cnull()) {}
 
-  tuple(typename access_traits<T0>::parameter_type t0,
+  __decl_host __decl_device tuple(typename access_traits<T0>::parameter_type t0,
         typename access_traits<T1>::parameter_type t1,
         typename access_traits<T2>::parameter_type t2,
         typename access_traits<T3>::parameter_type t3,
@@ -569,16 +631,16 @@ public:
 
 
   template<class U1, class U2>
-  tuple(const cons<U1, U2>& p) : inherited(p) {}
+  __decl_host __decl_device tuple(const cons<U1, U2>& p) : inherited(p) {}
 
   template <class U1, class U2>
-  tuple& operator=(const cons<U1, U2>& k) {
+  __decl_host __decl_device tuple& operator=(const cons<U1, U2>& k) {
     inherited::operator=(k);
     return *this;
   }
 
   template <class U1, class U2>
-  tuple& operator=(const std::pair<U1, U2>& k) {
+  __decl_host __decl_device tuple& operator=(const std::pair<U1, U2>& k) {
     BOOST_STATIC_ASSERT(length<tuple>::value == 2);// check_length = 2
     this->head = k.first;
     this->tail.head = k.second;
@@ -603,9 +665,9 @@ namespace detail {
 struct swallow_assign;
 typedef void (detail::swallow_assign::*ignore_t)();
 struct swallow_assign {
-  swallow_assign(ignore_t(*)(ignore_t)) {}
+  __decl_host __decl_device swallow_assign(ignore_t(*)(ignore_t)) {}
   template<typename T>
-  swallow_assign const& operator=(const T&) const {
+  __decl_host __decl_device swallow_assign const& operator=(const T&) const {
     return *this;
   }
 };
@@ -614,7 +676,7 @@ struct swallow_assign {
 } // namespace detail
 
 // "ignore" allows tuple positions to be ignored when using "tie".
-inline detail::ignore_t ignore(detail::ignore_t) { return 0; }
+__decl_host __decl_device inline detail::ignore_t ignore(detail::ignore_t) { return 0; }
 
 // ---------------------------------------------------------------------------
 // The call_traits for make_tuple
@@ -730,40 +792,40 @@ struct make_tuple_mapper {
 } // end detail
 
 // -make_tuple function templates -----------------------------------
-inline tuple<> make_tuple() {
+__decl_host __decl_device inline tuple<> make_tuple() {
   return tuple<>();
 }
 
 template<class T0>
-inline typename detail::make_tuple_mapper<T0>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0>::type
 make_tuple(const T0& t0) {
   typedef typename detail::make_tuple_mapper<T0>::type t;
   return t(t0);
 }
 
 template<class T0, class T1>
-inline typename detail::make_tuple_mapper<T0, T1>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1>::type
 make_tuple(const T0& t0, const T1& t1) {
   typedef typename detail::make_tuple_mapper<T0, T1>::type t;
   return t(t0, t1);
 }
 
 template<class T0, class T1, class T2>
-inline typename detail::make_tuple_mapper<T0, T1, T2>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2) {
   typedef typename detail::make_tuple_mapper<T0, T1, T2>::type t;
   return t(t0, t1, t2);
 }
 
 template<class T0, class T1, class T2, class T3>
-inline typename detail::make_tuple_mapper<T0, T1, T2, T3>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2, T3>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3) {
   typedef typename detail::make_tuple_mapper<T0, T1, T2, T3>::type t;
   return t(t0, t1, t2, t3);
 }
 
 template<class T0, class T1, class T2, class T3, class T4>
-inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4) {
   typedef typename detail::make_tuple_mapper<T0, T1, T2, T3, T4>::type t;
@@ -771,7 +833,7 @@ make_tuple(const T0& t0, const T1& t1, c
 }
 
 template<class T0, class T1, class T2, class T3, class T4, class T5>
-inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4, const T5& t5) {
   typedef typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5>::type t;
@@ -779,7 +841,7 @@ make_tuple(const T0& t0, const T1& t1, c
 }
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6>
-inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4, const T5& t5, const T6& t6) {
   typedef typename detail::make_tuple_mapper
@@ -789,7 +851,7 @@ make_tuple(const T0& t0, const T1& t1, c
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7>
-inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
+__decl_host __decl_device inline typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4, const T5& t5, const T6& t6, const T7& t7) {
   typedef typename detail::make_tuple_mapper
@@ -799,7 +861,7 @@ make_tuple(const T0& t0, const T1& t1, c
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7, class T8>
-inline typename detail::make_tuple_mapper
+__decl_host __decl_device inline typename detail::make_tuple_mapper
   <T0, T1, T2, T3, T4, T5, T6, T7, T8>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4, const T5& t5, const T6& t6, const T7& t7,
@@ -811,7 +873,7 @@ make_tuple(const T0& t0, const T1& t1, c
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7, class T8, class T9>
-inline typename detail::make_tuple_mapper
+__decl_host __decl_device inline typename detail::make_tuple_mapper
   <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type
 make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3,
                   const T4& t4, const T5& t5, const T6& t6, const T7& t7,
@@ -862,35 +924,35 @@ struct tie_mapper {
 
 // Tie function templates -------------------------------------------------
 template<class T0>
-inline typename detail::tie_mapper<T0>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0>::type
 tie(T0& t0) {
   typedef typename detail::tie_mapper<T0>::type t;
   return t(t0);
 }
 
 template<class T0, class T1>
-inline typename detail::tie_mapper<T0, T1>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1>::type
 tie(T0& t0, T1& t1) {
   typedef typename detail::tie_mapper<T0, T1>::type t;
   return t(t0, t1);
 }
 
 template<class T0, class T1, class T2>
-inline typename detail::tie_mapper<T0, T1, T2>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2>::type
 tie(T0& t0, T1& t1, T2& t2) {
   typedef typename detail::tie_mapper<T0, T1, T2>::type t;
   return t(t0, t1, t2);
 }
 
 template<class T0, class T1, class T2, class T3>
-inline typename detail::tie_mapper<T0, T1, T2, T3>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2, T3>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3) {
   typedef typename detail::tie_mapper<T0, T1, T2, T3>::type t;
   return t(t0, t1, t2, t3);
 }
 
 template<class T0, class T1, class T2, class T3, class T4>
-inline typename detail::tie_mapper<T0, T1, T2, T3, T4>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2, T3, T4>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4) {
   typedef typename detail::tie_mapper<T0, T1, T2, T3, T4>::type t;
@@ -898,7 +960,7 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 }
 
 template<class T0, class T1, class T2, class T3, class T4, class T5>
-inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4, T5& t5) {
   typedef typename detail::tie_mapper<T0, T1, T2, T3, T4, T5>::type t;
@@ -906,7 +968,7 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 }
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6>
-inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5, T6>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5, T6>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4, T5& t5, T6& t6) {
   typedef typename detail::tie_mapper
@@ -916,7 +978,7 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7>
-inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
+__decl_host __decl_device inline typename detail::tie_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4, T5& t5, T6& t6, T7& t7) {
   typedef typename detail::tie_mapper
@@ -926,7 +988,7 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7, class T8>
-inline typename detail::tie_mapper
+__decl_host __decl_device inline typename detail::tie_mapper
   <T0, T1, T2, T3, T4, T5, T6, T7, T8>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4, T5& t5, T6& t6, T7& t7,
@@ -938,7 +1000,7 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 
 template<class T0, class T1, class T2, class T3, class T4, class T5, class T6,
          class T7, class T8, class T9>
-inline typename detail::tie_mapper
+__decl_host __decl_device inline typename detail::tie_mapper
   <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type
 tie(T0& t0, T1& t1, T2& t2, T3& t3,
                   T4& t4, T5& t5, T6& t6, T7& t7,
@@ -950,21 +1012,21 @@ tie(T0& t0, T1& t1, T2& t2, T3& t3,
 
 template <class T0, class T1, class T2, class T3, class T4,
           class T5, class T6, class T7, class T8, class T9>
-void swap(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& lhs,
+__decl_host __decl_device void swap(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& lhs,
           tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& rhs);
-inline void swap(null_type&, null_type&) {}
+__decl_host __decl_device inline void swap(null_type&, null_type&) {}
 template<class HH>
-inline void swap(cons<HH, null_type>& lhs, cons<HH, null_type>& rhs) {
+__decl_host __decl_device inline void swap(cons<HH, null_type>& lhs, cons<HH, null_type>& rhs) {
   ::boost::swap(lhs.head, rhs.head);
 }
 template<class HH, class TT>
-inline void swap(cons<HH, TT>& lhs, cons<HH, TT>& rhs) {
+__decl_host __decl_device inline void swap(cons<HH, TT>& lhs, cons<HH, TT>& rhs) {
   ::boost::swap(lhs.head, rhs.head);
   ::boost::tuples::swap(lhs.tail, rhs.tail);
 }
 template <class T0, class T1, class T2, class T3, class T4,
           class T5, class T6, class T7, class T8, class T9>
-inline void swap(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& lhs,
+__decl_host __decl_device inline void swap(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& lhs,
           tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& rhs) {
   typedef tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> tuple_type;
   typedef typename tuple_type::inherited base;
diff -rupN boost~/tuple/tuple_comparison.hpp boost/tuple/tuple_comparison.hpp
--- boost~/tuple/tuple_comparison.hpp	2011-05-04 13:20:44.000000000 +0800
+++ boost/tuple/tuple_comparison.hpp	2011-07-15 14:05:09.553055276 +0800
@@ -35,12 +35,12 @@
 namespace boost {
 namespace tuples {
 
-inline bool operator==(const null_type&, const null_type&) { return true; }
-inline bool operator>=(const null_type&, const null_type&) { return true; }
-inline bool operator<=(const null_type&, const null_type&) { return true; }
-inline bool operator!=(const null_type&, const null_type&) { return false; }
-inline bool operator<(const null_type&, const null_type&) { return false; }
-inline bool operator>(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool operator==(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool operator>=(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool operator<=(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool operator!=(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool operator<(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool operator>(const null_type&, const null_type&) { return false; }
 
 
 namespace detail {
@@ -51,56 +51,56 @@ namespace detail {
 
 
 template<class T1, class T2>
-inline bool eq(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool eq(const T1& lhs, const T2& rhs) {
   return lhs.get_head() == rhs.get_head() &&
          eq(lhs.get_tail(), rhs.get_tail());
 }
 template<>
-inline bool eq<null_type,null_type>(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool eq<null_type,null_type>(const null_type&, const null_type&) { return true; }
 
 template<class T1, class T2>
-inline bool neq(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool neq(const T1& lhs, const T2& rhs) {
   return lhs.get_head() != rhs.get_head()  ||
          neq(lhs.get_tail(), rhs.get_tail());
 }
 template<>
-inline bool neq<null_type,null_type>(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool neq<null_type,null_type>(const null_type&, const null_type&) { return false; }
 
 template<class T1, class T2>
-inline bool lt(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool lt(const T1& lhs, const T2& rhs) {
   return lhs.get_head() < rhs.get_head()  ||
           ( !(rhs.get_head() < lhs.get_head()) &&
             lt(lhs.get_tail(), rhs.get_tail()));
 }
 template<>
-inline bool lt<null_type,null_type>(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool lt<null_type,null_type>(const null_type&, const null_type&) { return false; }
 
 template<class T1, class T2>
-inline bool gt(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool gt(const T1& lhs, const T2& rhs) {
   return lhs.get_head() > rhs.get_head()  ||
           ( !(rhs.get_head() > lhs.get_head()) &&
             gt(lhs.get_tail(), rhs.get_tail()));
 }
 template<>
-inline bool gt<null_type,null_type>(const null_type&, const null_type&) { return false; }
+__decl_host __decl_device inline bool gt<null_type,null_type>(const null_type&, const null_type&) { return false; }
 
 template<class T1, class T2>
-inline bool lte(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool lte(const T1& lhs, const T2& rhs) {
   return lhs.get_head() <= rhs.get_head()  &&
           ( !(rhs.get_head() <= lhs.get_head()) ||
             lte(lhs.get_tail(), rhs.get_tail()));
 }
 template<>
-inline bool lte<null_type,null_type>(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool lte<null_type,null_type>(const null_type&, const null_type&) { return true; }
 
 template<class T1, class T2>
-inline bool gte(const T1& lhs, const T2& rhs) {
+__decl_host __decl_device inline bool gte(const T1& lhs, const T2& rhs) {
   return lhs.get_head() >= rhs.get_head()  &&
           ( !(rhs.get_head() >= lhs.get_head()) ||
             gte(lhs.get_tail(), rhs.get_tail()));
 }
 template<>
-inline bool gte<null_type,null_type>(const null_type&, const null_type&) { return true; }
+__decl_host __decl_device inline bool gte<null_type,null_type>(const null_type&, const null_type&) { return true; }
 
 } // end of namespace detail
 
@@ -108,7 +108,7 @@ inline bool gte<null_type,null_type>(con
 // equal ----
 
 template<class T1, class T2, class S1, class S2>
-inline bool operator==(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator==(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
   // check that tuple lengths are equal
   BOOST_STATIC_ASSERT(length<T2>::value == length<S2>::value);
@@ -119,7 +119,7 @@ inline bool operator==(const cons<T1, T2
 // not equal -----
 
 template<class T1, class T2, class S1, class S2>
-inline bool operator!=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator!=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
 
   // check that tuple lengths are equal
@@ -130,7 +130,7 @@ inline bool operator!=(const cons<T1, T2
 
 // <
 template<class T1, class T2, class S1, class S2>
-inline bool operator<(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator<(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
   // check that tuple lengths are equal
   BOOST_STATIC_ASSERT(length<T2>::value == length<S2>::value);
@@ -140,7 +140,7 @@ inline bool operator<(const cons<T1, T2>
 
 // >
 template<class T1, class T2, class S1, class S2>
-inline bool operator>(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator>(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
   // check that tuple lengths are equal
   BOOST_STATIC_ASSERT(length<T2>::value == length<S2>::value);
@@ -150,7 +150,7 @@ inline bool operator>(const cons<T1, T2>
 
 // <=
 template<class T1, class T2, class S1, class S2>
-inline bool operator<=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator<=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
   // check that tuple lengths are equal
   BOOST_STATIC_ASSERT(length<T2>::value == length<S2>::value);
@@ -160,7 +160,7 @@ inline bool operator<=(const cons<T1, T2
 
 // >=
 template<class T1, class T2, class S1, class S2>
-inline bool operator>=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
+__decl_host __decl_device inline bool operator>=(const cons<T1, T2>& lhs, const cons<S1, S2>& rhs)
 {
   // check that tuple lengths are equal
   BOOST_STATIC_ASSERT(length<T2>::value == length<S2>::value);
diff -rupN boost~/tuple/tuple.hpp boost/tuple/tuple.hpp
--- boost~/tuple/tuple.hpp	2011-05-04 13:20:44.000000000 +0800
+++ boost/tuple/tuple.hpp	2011-07-15 14:05:09.553055276 +0800
@@ -48,7 +48,7 @@ using tuples::get;
 // functions instead:
 //
 template<int N, class HT, class TT>
-inline typename tuples::access_traits<
+__decl_host __decl_device inline typename tuples::access_traits<
                   typename tuples::element<N, tuples::cons<HT, TT> >::type
                 >::non_const_type
 get(tuples::cons<HT, TT>& c) {
@@ -58,7 +58,7 @@ get(tuples::cons<HT, TT>& c) {
 // the element. If the element is a reference, returns the reference
 // as such (that is, can return a non-const reference)
 template<int N, class HT, class TT>
-inline typename tuples::access_traits<
+__decl_host __decl_device inline typename tuples::access_traits<
                   typename tuples::element<N, tuples::cons<HT, TT> >::type
                 >::const_type
 get(const tuples::cons<HT, TT>& c) {
@@ -70,14 +70,14 @@ get(const tuples::cons<HT, TT>& c) {
 // so use forwarding functions instead:
 //
 template<int N, typename Head, typename Tail>
-typename tuples::detail::element_ref<N, tuples::cons<Head, Tail> >::RET
+__decl_host __decl_device typename tuples::detail::element_ref<N, tuples::cons<Head, Tail> >::RET
 get(tuples::cons<Head, Tail>& t, tuples::detail::workaround_holder<N>* = 0)
 {
    return tuples::detail::get_class<N>::get(t);
 }
 
 template<int N, typename Head, typename Tail>
-typename tuples::detail::element_const_ref<N, tuples::cons<Head, Tail> >::RET
+__decl_host __decl_device typename tuples::detail::element_const_ref<N, tuples::cons<Head, Tail> >::RET
 get(const tuples::cons<Head, Tail>& t, tuples::detail::workaround_holder<N>* = 0)
 {
    return tuples::detail::get_class<N>::get(t);
diff -rupN boost~/tuple/tuple.hpp.old boost/tuple/tuple.hpp.old
--- boost~/tuple/tuple.hpp.old	2011-07-14 22:59:18.813678951 +0800
+++ boost/tuple/tuple.hpp.old	1970-01-01 08:00:00.000000000 +0800
@@ -1,90 +0,0 @@
-//  tuple.hpp - Boost Tuple Library --------------------------------------
-
-// Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)
-//
-// Distributed under the Boost Software License, Version 1.0. (See
-// accompanying file LICENSE_1_0.txt or copy at
-// http://www.boost.org/LICENSE_1_0.txt)
-
-// For more information, see http://www.boost.org
-
-// ----------------------------------------------------------------- 
-
-#ifndef BOOST_TUPLE_HPP
-#define BOOST_TUPLE_HPP
-
-#if defined(__sgi) && defined(_COMPILER_VERSION) && _COMPILER_VERSION <= 730
-// Work around a compiler bug.
-// boost::python::tuple has to be seen by the compiler before the
-// boost::tuple class template.
-namespace boost { namespace python { class tuple; }}
-#endif
-
-#include "boost/config.hpp"
-#include "boost/static_assert.hpp"
-
-#if defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
-// The MSVC version
-#include "boost/tuple/detail/tuple_basic_no_partial_spec.hpp"
-
-#else
-// other compilers
-#include "boost/ref.hpp"
-#include "boost/tuple/detail/tuple_basic.hpp"
-
-#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
-
-namespace boost {    
-
-using tuples::tuple;
-using tuples::make_tuple;
-using tuples::tie;
-#if !defined(BOOST_NO_USING_TEMPLATE)
-using tuples::get;
-#elif !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
-//
-// The "using tuples::get" statement causes the
-// Borland compiler to ICE, use forwarding
-// functions instead:
-//
-template<int N, class HT, class TT>
-inline typename tuples::access_traits<
-                  typename tuples::element<N, tuples::cons<HT, TT> >::type
-                >::non_const_type
-get(tuples::cons<HT, TT>& c) {
-  return tuples::get<N,HT,TT>(c);
-} 
-// get function for const cons-lists, returns a const reference to
-// the element. If the element is a reference, returns the reference
-// as such (that is, can return a non-const reference)
-template<int N, class HT, class TT>
-inline typename tuples::access_traits<
-                  typename tuples::element<N, tuples::cons<HT, TT> >::type
-                >::const_type
-get(const tuples::cons<HT, TT>& c) {
-  return tuples::get<N,HT,TT>(c);
-}
-#else  // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
-//
-// MSVC, using declarations don't mix with templates well,
-// so use forwarding functions instead:
-//
-template<int N, typename Head, typename Tail>
-typename tuples::detail::element_ref<N, tuples::cons<Head, Tail> >::RET
-get(tuples::cons<Head, Tail>& t, tuples::detail::workaround_holder<N>* = 0)
-{
-   return tuples::detail::get_class<N>::get(t);
-}
-
-template<int N, typename Head, typename Tail>
-typename tuples::detail::element_const_ref<N, tuples::cons<Head, Tail> >::RET
-get(const tuples::cons<Head, Tail>& t, tuples::detail::workaround_holder<N>* = 0)
-{
-   return tuples::detail::get_class<N>::get(t);
-}
-#endif // BOOST_NO_USING_TEMPLATE
-   
-} // end namespace boost
-
-
-#endif // BOOST_TUPLE_HPP
